// testing.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
//#include "rangefunc.h"
#include <iostream>
#include <vector>
#include <unordered_map>
#include <map>
#include <string>
#include <time.h>

std::vector<int> range(int num1, int num2)
{
	std::vector<int> curr_vec;
	if (num1 < num2)
	{
		while (num1 != num2 + 1)
		{
			curr_vec.push_back(num1);
			num1++;
		}
		return curr_vec;
	}
	else if (num1 > num2)
	{
		while (num1 != num2 - 1)
		{
			curr_vec.push_back(num1);
			num1--;
		}
		return curr_vec;
	}
}
//{x1: {y1: {z1: value}, y2: {z1: value}} } would be an example
// need to create dict1 with each xval 1-100
// for each xval need to create a yval 1-100
// for each yval need to create zval 1-100

int first_attempt()
{
	std::vector<int> a = range(0, 10);

	std::map<int, int> z;
	std::map<int, std::map<int, int>> yz;
	std::map<int, std::map<int, std::map<int, int>>> xyz;

	for (auto& zval : a)
	{
		z.emplace(std::make_pair(zval, 0));
		for (auto& yval : a)
		{
			yz.emplace(std::make_pair(yval, z));
			for (auto& xval : a)
			{
				xyz.emplace(std::make_pair(xval, yz));
			}
		}
	}

	/*for (auto& elemx : xyz)
	{
		for (auto& elemy : xyz[0])
		{
			for (auto& elemz : xyz[0][0])
			{
				std::cout << "{" << elemx.first << "{" << elemy.first << "{" << elemz.first << ":" << elemz.second << "}}}" << std::endl;
			}
		}
	}*/
	std::cout << xyz[0][5][4] << std::endl;
	std::cout << xyz[3][2][4] << std::endl;
	std::cout << xyz[0][5][0] << std::endl;
	std::cout << xyz[1][3][2] << std::endl;
	return 0;
}

int second_attempt()
{
	std::vector<int> a = range(0, 25);
	std::vector<int> z(a);
	std::vector<int> y(a);
	std::vector<int> x(a);

	std::vector<std::vector<std::vector<int>>> xyz;

	for (auto& xval : x) // for each item (0-10) in z vector
	{
		std::vector<std::vector<int>> xvarlist;
		for (auto& yval : y)
		{
			std::vector<int> yvarlist;
			for (auto& zval : z)
			{
				yvarlist.push_back(0);
			}
			xvarlist.push_back(yvarlist);
		}
		xyz.push_back(xvarlist);
	}

	for (auto& x : xyz)
	{
		std::cout << "\n";
		for (auto& y : x)
		{
			std::cout << "\n";
			for (auto& z : y)
			{
				std::cout << z;
			}
		}
	}
	return 0;
}

int testarea()
{
	std::vector<int> a;
	for (auto& i : range(0, 5))
	{
		a.push_back(i);
	}
	for (auto& i : a)
	{
		std::cout << i << std::endl;
	}
	return 0;
}

int main()
{
	clock_t start = clock();
	//second_attempt();
	first_attempt();
	//testarea();
	clock_t end = clock();
	double cpu_time_used = ((double)(end - start)) / CLOCKS_PER_SEC;
	printf("\nFunction took %f seconds to execute\n", cpu_time_used);
	return 0;
}
